{"remainingRequest":"C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\src\\pages\\Home\\HomeComponent.vue?vue&type=template&id=6f570c32&","dependencies":[{"path":"C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\src\\pages\\Home\\HomeComponent.vue","mtime":1605044724594},{"path":"C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PICHAU\\Desktop\\GFunc-final\\gfunc\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}